version: 2.1

# -------------------------
#        COMMANDS
# -------------------------
commands:

  setup:
    steps:
        # for local builds, this needs to be checked out to `$CIRCLE_WORKING_DIRECTORY`
        - checkout
        - run:
            name: Build architecture
            command: |
              if [[ $(uname -m) == 'arm64' ]]; then
                build_arm64=true
                echo "*** Build: arm64"
                echo 'export build_arm64=true' > ~/.profile
              else
                build_arm64=false
                echo "*** Build: x86_64"
                echo 'export build_arm64=false' > ~/.profile
              fi
        - run:
            name: Avoid hosts unknown for gitlab.gnome.org
            command: mkdir -p ~/.ssh/ && echo -e "Host gitlab.gnome.org\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
        - run:
            name: Setup Python3
            command: |
              cd ~/
              brew install wget
              wget -c 'https://www.python.org/ftp/python/3.9.13/python-3.9.13-macos11.pkg' -O python-3.9.13-macosx11.pkg
              sudo installer -pkg python-3.9.13-macosx11.pkg -target /
        - run:
            name: Setup MacOS SDK
            command: |
              if [ "$build_arm64" = true ] ; then
                  echo "*** Setup 11.3 SDK"
                  cd /Library/Developer/CommandLineTools/SDKs
                  if [ ! -d "MacOSX11.3.sdk" ]
                  then
                      sudo curl -L 'https://github.com/phracker/MacOSX-SDKs/releases/download/11.3/MacOSX11.3.sdk.tar.xz' | sudo tar -xzf -
                  fi
                  echo 'export SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX11.3.sdk' >> ~/.profile
                  echo 'export MACOSX_DEPLOYMENT_TARGET=11.0' >> ~/.profile
                  echo 'export ARCHFLAGS="-arch arm64"' >> ~/.profile
                  echo 'export GIMP_ARM64=true' >> ~/.profile
              else
                  echo "*** Setup 10.12 SDK"
                  cd /Library/Developer/CommandLineTools/SDKs
                  if [ ! -d "MacOSX10.12.sdk" ]
                  then
                      sudo curl -L 'https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.12.sdk.tar.xz' | sudo tar -xzf -
                  fi
                  echo 'export SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX10.12.sdk' >> ~/.profile
                  echo 'export MACOSX_DEPLOYMENT_TARGET=10.12' >> ~/.profile
                  echo 'export ARCHFLAGS="-arch x86_64"' >> ~/.profile
                  echo 'export PYENV_PYTHON_VERSION=3.10.0' >> ~/.profile
              fi
        - run:
            name: coreutils for realpath (for jpeg-xl)
            command: brew install coreutils

  build-env-local:
    steps:
        - run:
            name: Setup JHBuild
            command: |
              cd $HOME
              mkdir -p ~/.config && cp $CIRCLE_WORKING_DIRECTORY/jhbuildrc-gtk-osx-gimp ~/.config/jhbuildrc-custom
              echo 'export PATH="$HOME/.local/bin:$PATH:$HOME/.new_local/bin"' >> ~/.profile
              source ~/.profile
              PIPENV_YES=1 $CIRCLE_WORKING_DIRECTORY/gtk-osx-setup.sh
              $HOME/.new_local/bin/jhbuild bootstrap-gtk-osx-gimp
              cat ~/.profile

  build-env:
    steps:
        - restore_cache:
            keys:
              - 1-jhbuild-v3-v4
              - 1-jhbuild-v3-
        - run:
            name: Setup JHBuild
            command: |
              cd $HOME
              mkdir -p ~/.config && cp ~/project/jhbuildrc-gtk-osx-gimp-2.99 ~/.config/jhbuildrc-custom
              echo 'export PATH="$HOME/.local/bin:$PATH:$HOME/.new_local/bin"' >> ~/.profile
              source ~/.profile
              PIPENV_YES=1 ~/project/gtk-osx-setup.sh
              $HOME/.new_local/bin/jhbuild bootstrap-gtk-osx-gimp
              cat ~/.profile
        - save_cache:
            paths:
              - ~/.new_local
              - ~/gtk
              - ~/.config
            key: 1-jhbuild-v3-v4


# -------------------------
#        JOBS
# -------------------------
jobs:

  build-env:
    machine: true
    resource_class: gnome/gimp

    steps:
        - setup
        - build-env-local

  bootstrap:
    machine: true
    resource_class: gnome/gimp

    steps:
        - setup
        - build-env-local
        - run:
            name: Bootstrap
            command: |
              source ~/.profile && jhbuild build icu libnsgif meta-gtk-osx-freetype meta-gtk-osx-bootstrap meta-gtk-osx-gtk3
        - run:
            name: Cleanup
            command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*

  dependencies-part1:
    machine: true
    resource_class: gnome/gimp

    steps:
        - setup
        - build-env-local
        - run:
            name: Build GIMP dependencies part 1 (without gegl/babl)
            command: |
              source ~/.profile && jhbuild build openjpeg ilmbase json-c libde265 nasm x265
              source ~/.profile && jhbuild build frodo-getopt xmlto pycairo pygobject3 gtk-mac-integration-python libarchive libyaml uuid
        - run:
            name: Cleanup
            command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*

  dependencies-part2:
    machine: true
    resource_class: gnome/gimp

    steps:
        - setup
        - build-env-local
        - run:
            name: Build GIMP dependencies part 2
            command: |
              source ~/.profile && jhbuild build gimp-common-deps appstream-glib
              source ~/.profile && jhbuild build python3
        - run:
            name: Cleanup
            command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*

  dependencies-babl-gegl:
    machine: true
    resource_class: gnome/gimp

    steps:
        - setup
        - build-env-local
        - run:
            name: Build and test babl/gegl
            command: source ~/.profile && jhbuild build --check babl gegl

  build-gimp:
    machine: true
    resource_class: gnome/gimp

    steps:
      - setup
      - build-env-local
      - run:
          name: Build GIMP
          # XXX `make check` is not working reliably under circle ci, so we are
          # not using --check flag
          command: |
            source ~/.profile
            jhbuild build gimp
      # - run:
      #     name: Building GIMP help (en) from git
      #     command: source ~/.profile && ALL_LINGUAS=en jhbuild build gimp-help-git
      # - run:
      #     name: Cleanup
      #     command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*
      - run:
          name: Setup gtk-mac-bundler
          command: |
            if [ ! -d "$HOME/Source/gtk-mac-bundler" ]
            then
              cd ~/Source
              git clone https://gitlab.gnome.org/lukaso/gtk-mac-bundler
              cd gtk-mac-bundler
              make install
              cd ~
            fi
      - run:
          name: Bundling
          command: |
            source ~/.profile
            cd ${HOME}/project/package

            # run script
            jhbuild run ./build_1.sh debug
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: "~"
          # Must be relative path from root
          paths:
            - gimp299-osx-app

  package-gimp:
    macos:
      xcode: "13.3.0"

    steps:
        - setup
        - build-env
        - run:
            name: Importing signing certificate
            command: |
              mkdir ${HOME}/codesign && cd ${HOME}/codesign
              echo "$osx_crt" | base64 -D > gnome.pfx
              curl 'https://developer.apple.com/certificationauthority/AppleWWDRCA.cer' > apple.cer
              security create-keychain -p "" signchain
              security set-keychain-settings signchain
              security unlock-keychain -u signchain
              security list-keychains  -s "${HOME}/Library/Keychains/signchain-db" "${HOME}/Library/Keychains/login.keychain-db"
              security import apple.cer -k signchain  -T /usr/bin/codesign
              security import gnome.pfx  -k signchain -P "$osx_crt_pw" -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple: -k "" signchain
              rm -rf ${HOME}/codesign
        - attach_workspace:
            # Must be absolute path or relative path from working_directory
            at: "~"
        - run:
            name: Creating DMG package
            command: |
              source ~/.profile
              cd ${HOME}/project/package

              # Authorize applescript on circle ci build
              epochdate=$(($(date +'%s * 1000 + %-N / 1000000')))
              tcc_service_appleevents="replace into access (service,client,client_type,auth_value,auth_reason,auth_version,indirect_object_identifier_type,indirect_object_identifier,flags,last_modified) values (\"kTCCServiceAppleEvents\",\"/usr/sbin/sshd\",1,2,4,1,0,\"com.apple.finder\",0,$epochdate);"
              sudo sqlite3 "/Users/distiller/Library/Application Support/com.apple.TCC/TCC.db" "$tcc_service_appleevents"

              # run script
              jhbuild run ./build_2.sh arm64
        - run:
            name:  Notarizing DMG package
            command: |
              source ~/.profile
              cd ${HOME}/project/package
              jhbuild run ./notarize.sh
        - store_artifacts:
            path: /tmp/artifacts
            destination: builds

workflows:
  version: 2
  build-different-versions:
    jobs:
      - build-env
      - bootstrap:
          requires:
            - build-env
      - dependencies-part1:
          requires:
            - bootstrap
      - dependencies-part2:
          requires:
            - dependencies-part1
      - dependencies-babl-gegl:
          requires:
            - dependencies-part2
      - build-gimp:
          requires:
            - dependencies-babl-gegl
      - package-gimp:
          requires:
            - build-gimp
