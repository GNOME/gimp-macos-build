version: 2.1

# -------------------------
#        COMMANDS
# -------------------------
commands:

  setup:
    steps:
      # for local builds, this needs to be checked out to `~/project`
      - checkout
      - run:
          name: Avoid hosts unknown for gitlab.gnome.org
          command: mkdir -p ~/.ssh/ && echo -e "Host gitlab.gnome.org\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: Avoid hosts unknown for github
          command: mkdir -p ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
      - run:
          name: Workaround gitlab bug https://gitlab.com/gitlab-org/gitlab/-/issues/9371 which blocks gtk3
          command: |
            git config --global http.postBuffer 524288000
            git config --global http.version HTTP/1.1

  cache-break-hosted:
    steps:
        - run:
            name: checksums for caching
            # Triggering cache changes should be done in the directories below
            command: |
              find ./ports/cache_break -type f -exec md5 {} \; | md5 | cut -d' ' -f1 > CACHE_BREAK
              date +%s > CACHE_ITER
              cat CACHE_BREAK
              cat CACHE_ITER

  cache-break-self:
    steps:
      - run:
          name: should cache break
          # Triggering cache changes should be done in the directories below
          command: |
            cache_break=$(md5 ports/cache_break)
            if [ ! -e "${HOME}/CACHE_BREAK" ] || [ "${cache_break}" != "$(cat "${HOME}/CACHE_BREAK")" ]; then
              echo "Cache break"
              echo "${cache_break}" > "${HOME}/CACHE_BREAK"
              scripts/macports_uninstall.sh --formulas-only
            fi

  got-cache-so-skip-job-hosted:
    steps:
        - restore_cache:
            keys:
              - got_cache{{ checksum "CACHE_BREAK" }}-gimpv3-{{ checksum "CACHE_ITER" }}
              - got_cache{{ checksum "CACHE_BREAK" }}-gimpv3-
        - run:
            command: |
              if [ -f ~/got_cache/cache_check ]; then
                echo "**skipping job"
                circleci-agent step halt
              fi

  got-cache-hosted:
    steps:
        - restore_cache:
            keys:
              - got_cache{{ checksum "CACHE_BREAK" }}-gimpv3-{{ checksum "CACHE_ITER" }}
              - got_cache{{ checksum "CACHE_BREAK" }}-gimpv3-

  get-cached-data-hosted:
    steps:
        - run:
            command: |
              # get around permissions problems restoring
              if [ ! -d /opt/local ]; then
                sudo mkdir -p /opt/local
              fi
              sudo chown -R "$USER":staff /opt/local
        - restore_cache:
            keys:
              - v{{ checksum "CACHE_BREAK" }}-gimpv3-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt5v3-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt4v3-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt3v3-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt2v3-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt1v3-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimpv3-
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt5v3-
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt4v3-
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt3v3-
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt2v3-
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt1v3-
        - run:
            command: |
              if [ -d /opt/local ]; then
                sudo chown -R root:wheel /opt/local
              fi

  setup-macports:
    steps:
        - run:
            name: Install macports
            command: |
              scripts/macports0_install.sh --circleci
            no_output_timeout: 30m

  pre-cache-store-hosted:
    steps:
      - run:
          command: |
            mkdir -p ~/got_cache
            if [ ! -f ~/got_cache/cache_check ]; then
              echo "we got cache" > ~/got_cache/cache_check
            fi
            echo "**saving that we have cache"
      - save_cache:
          paths:
            - ~/got_cache
          key: got_cache{{ checksum "CACHE_BREAK" }}-gimpv3-{{ checksum "CACHE_ITER" }}

  setup-gtk-mac-bundler:
    steps:
      - run:
          name: Setup gtk-mac-bundler
          command: |
            if [ ! -d ~/Source/gtk-mac-bundler ]; then
              mkdir -p ~/Source
              cd ~/Source
              git clone https://gitlab.gnome.org/lukaso/gtk-mac-bundler
              cd gtk-mac-bundler
              make install
            fi

  import-signing-cert:
    steps:
      - run:
          name: Importing signing certificate
          command: |
            mkdir ${HOME}/codesign && cd ${HOME}/codesign
            echo "$osx_crt" | base64 -D > gnome.pfx
            curl 'https://developer.apple.com/certificationauthority/AppleWWDRCA.cer' > apple.cer
            security create-keychain -p "" signchain
            security set-keychain-settings signchain
            security unlock-keychain -u signchain
            security list-keychains  -s "${HOME}/Library/Keychains/signchain-db" "${HOME}/Library/Keychains/login.keychain-db"
            security import apple.cer -k signchain  -T /usr/bin/codesign
            security import gnome.pfx  -k signchain -P "$osx_crt_pw" -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple: -k "" signchain
            rm -rf ${HOME}/codesign

  authorize-applescript:
    steps:
      - run:
          name: Authorize AppleScript
          command: |
            # Authorize applescript on circle ci build
            epochdate=$(($(date +'%s * 1000 + %-N / 1000000')))
            tcc_service_appleevents="replace into access (service,client,client_type,auth_value,auth_reason,auth_version,indirect_object_identifier_type,indirect_object_identifier,flags,last_modified) values (\"kTCCServiceAppleEvents\",\"/usr/sbin/sshd\",1,2,4,1,0,\"com.apple.finder\",0,$epochdate);"
            sudo sqlite3 "/Users/distiller/Library/Application Support/com.apple.TCC/TCC.db" "$tcc_service_appleevents"

# -------------------------
#        JOBS
# -------------------------

jobs:

# -------------------------
#        JOBS SELF HOSTED
# -------------------------

  dependencies-part1-self:
    machine: true
    resource_class: gnome/gimp

    steps:
      - setup
      - cache-break-self
      - setup-macports
      - run:
          name: Build GIMP dependencies part 1
          command: |
            scripts/macports1_install_packages.sh --part1
          no_output_timeout: 30m

  dependencies-part2-self:
    machine: true
    resource_class: gnome/gimp

    steps:
      - setup
      - setup-macports
      - run:
          name: Build GIMP dependencies part 2
          command: |
            scripts/macports1_install_packages.sh --part2
          no_output_timeout: 30m

  dependencies-part3-self:
    machine: true
    resource_class: gnome/gimp

    steps:
      - setup
      - setup-macports
      - run:
          name: Build GIMP dependencies part 3
          command: |
            scripts/macports1_install_packages.sh --part3
          no_output_timeout: 30m

  dependencies-part4-self:
    machine: true
    resource_class: gnome/gimp

    steps:
      - setup
      - setup-macports
      - run:
          name: Build GIMP dependencies part 4
          command: |
            scripts/macports1_install_packages.sh --part4
          no_output_timeout: 30m

  dependencies-part5-self:
    machine: true
    resource_class: gnome/gimp

    steps:
      - setup
      - setup-macports
      - run:
          name: Build GIMP dependencies part 5
          command: |
            scripts/macports1_install_packages.sh --part5
          no_output_timeout: 30m

  build-gimp-self:
    machine: true
    resource_class: gnome/gimp

    steps:
      - setup
      - setup-macports
      - run:
          name: Build GIMP
          # XXX `make check` is not working reliably under circle ci, so we are
          # not using --check flag
          command: |
            scripts/macports2_install_gimp.sh
      - setup-gtk-mac-bundler
      - run:
          name: Creating DMG package
          command: |
            scripts/macports3_build_app.sh
          no_output_timeout: 20m
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: "~"
          # Must be relative path from root
          paths:
            - macports-gimp299-osx-app
            - macports-gimp299-osx-app-x86_64
            - .profile

  package-gimp-self:
    macos:
      xcode: "14.2.0"

    steps:
      - setup
      - import-signing-cert
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: "~"
      - authorize-applescript
      - run:
          name: Creating DMG package
          command: |
            source ~/.profile
            cd ${HOME}/project

            # run script
            scripts/macports4_build_dmg.sh
          no_output_timeout: 20m
      - run:
          name:  Notarizing DMG package
          command: |
            package/notarize.sh
            # Checksum
            echo "Calculating checksum"
            DMGNAME=$(find /tmp/artifacts/ -name "gimp-2.*.dmg")
            shasum -a 256 "${DMGNAME}" > "${DMGNAME}.sha256"
            echo "Checksum: $(cat "${DMGNAME}.sha256")"
          no_output_timeout: 20m
      - store_artifacts:
          path: /tmp/artifacts
          destination: builds

# -------------------------
#        JOBS CIRCLECI HOSTED
# -------------------------

  dependencies-part1-hosted:
    macos:
      xcode: "14.2.0"
      resource_class: macos.x86.medium.gen2

    steps:
      - setup
      - cache-break-hosted
      - got-cache-so-skip-job-hosted
      - get-cached-data-hosted
      - setup-macports
      - run:
          name: Build GIMP dependencies part 1
          command: |
            scripts/macports1_install_packages.sh --part1
          no_output_timeout: 30m
      - save_cache:
          paths:
            - /opt/local
            - /Applications/MacPorts
          key: v{{ checksum "CACHE_BREAK" }}-gimp-depspt1v3-{{ checksum "CACHE_ITER" }}

  dependencies-part2-hosted:
    macos:
      xcode: "14.2.0"
      resource_class: macos.x86.medium.gen2

    steps:
      - setup
      - cache-break-hosted
      - got-cache-so-skip-job-hosted
      - get-cached-data-hosted
      - setup-macports
      - run:
          name: Build GIMP dependencies part 2
          command: |
            scripts/macports1_install_packages.sh --part2
          no_output_timeout: 30m
      - save_cache:
          paths:
            - /opt/local
            - /Applications/MacPorts
          key: v{{ checksum "CACHE_BREAK" }}-gimp-depspt2v3-{{ checksum "CACHE_ITER" }}

  dependencies-part3-hosted:
    macos:
      xcode: "14.2.0"
      resource_class: macos.x86.medium.gen2

    steps:
      - setup
      - cache-break-hosted
      - got-cache-so-skip-job-hosted
      - get-cached-data-hosted
      - setup-macports
      - run:
          name: Build GIMP dependencies part 3
          command: |
            scripts/macports1_install_packages.sh --part3
          no_output_timeout: 30m
      - save_cache:
          paths:
            - /opt/local
            - /Applications/MacPorts
          key: v{{ checksum "CACHE_BREAK" }}-gimp-depspt3v3-{{ checksum "CACHE_ITER" }}

  dependencies-part4-hosted:
    macos:
      xcode: "14.2.0"
      resource_class: macos.x86.medium.gen2

    steps:
      - setup
      - cache-break-hosted
      - got-cache-so-skip-job-hosted
      - get-cached-data-hosted
      - setup-macports
      - run:
          name: Build GIMP dependencies part 4
          command: |
            scripts/macports1_install_packages.sh --part4
          no_output_timeout: 30m
      - save_cache:
          paths:
            - /opt/local
            - /Applications/MacPorts
          key: v{{ checksum "CACHE_BREAK" }}-gimp-depspt4v3-{{ checksum "CACHE_ITER" }}

  dependencies-part5-hosted:
    macos:
      xcode: "14.2.0"
      resource_class: macos.x86.medium.gen2

    steps:
      - setup
      - cache-break-hosted
      - got-cache-so-skip-job-hosted
      - get-cached-data-hosted
      - setup-macports
      - run:
          name: Build GIMP dependencies part 5
          command: |
            scripts/macports1_install_packages.sh --part5
          no_output_timeout: 30m
      - save_cache:
          paths:
            - /opt/local
            - /Applications/MacPorts
          key: v{{ checksum "CACHE_BREAK" }}-gimp-depspt5v3-{{ checksum "CACHE_ITER" }}

  build-gimp-and-package-hosted:
    macos:
      xcode: "14.2.0"
      resource_class: macos.x86.medium.gen2

    steps:
      - setup
      - cache-break-hosted
      - got-cache-hosted
      - get-cached-data-hosted
      - setup-macports
      - run:
          name: Build GIMP dependencies part 1
          command: |
            # if not cache then build deps in split parts
            if [ -f ~/got_cache/cache_check ]; then
              echo "**got cache, building all packages"
              scripts/macports1_install_packages.sh
            fi
          no_output_timeout: 30m
      - run:
          name: Build GIMP
          # XXX `make check` is not working reliably under circle ci, so we are
          # not using --check flag
          command: |
            scripts/macports2_install_gimp.sh circleci
      - save_cache:
          paths:
            - /opt/local
            - /Applications/MacPorts
          key: v{{ checksum "CACHE_BREAK" }}-gimpv3-{{ checksum "CACHE_ITER" }}
      - pre-cache-store-hosted
      - setup-gtk-mac-bundler
      - run:
          name: Build GIMP app
          command: |
            scripts/macports3_build_app.sh
          no_output_timeout: 20m
      - import-signing-cert
      - authorize-applescript
      - run:
          name: Creating DMG package
          command: |
            scripts/macports4_build_dmg.sh
          no_output_timeout: 20m
      - run:
          name:  Notarizing DMG package
          command: |
            package/notarize.sh
          no_output_timeout: 20m
      - store_artifacts:
          path: /tmp/artifacts
          destination: builds

workflows:
  version: 2
  build-arm64:
    jobs:
      - dependencies-part1-self
      - dependencies-part2-self:
          requires:
            - dependencies-part1-self
      - dependencies-part3-self:
          requires:
            - dependencies-part2-self
      - dependencies-part4-self:
          requires:
            - dependencies-part3-self
      # - dependencies-part5-self:
      #     requires:
      #       - dependencies-part4-self
      - build-gimp-self:
          requires:
            - dependencies-part4-self
      - package-gimp-self:
          requires:
            - build-gimp-self

  build-x86_64:
    jobs:
      - dependencies-part1-hosted
      - dependencies-part2-hosted:
          requires:
            - dependencies-part1-hosted
      - dependencies-part3-hosted:
          requires:
            - dependencies-part2-hosted
      - dependencies-part4-hosted:
          requires:
            - dependencies-part3-hosted
      # - dependencies-part5-hosted:
      #     requires:
      #       - dependencies-part4-hosted
      - build-gimp-and-package-hosted:
          requires:
            - dependencies-part4-hosted
