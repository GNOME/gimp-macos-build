version: 2.1


# -------------------------
#        COMMANDS
# -------------------------
commands:

  setup:
    steps:
        # for local builds, this needs to be checked out to `~/project`
        - checkout
        - run:
            name: Setup rust
            command: curl https://sh.rustup.rs -sSf | sh -s -- -y
        - run:
            name: Setup Python3
            command: |
              cd ~/
              curl -L 'https://www.python.org/ftp/python/3.9.7/python-3.9.7-macos11.pkg' > python-3.9.7-macosx11.pkg
              sudo installer -pkg python-3.9.7-macosx11.pkg -target /
              # Certificates are outdated, most likely after the recent
              # Let's Encrypt root certs fiasco. This fixes it by
              # updating the certs.
              open /Applications/Python\ 3.9/Install\ Certificates.command
        - run:
            name: Setup 10.12 SDK
            command: |
              cd /Library/Developer/CommandLineTools/SDKs
              sudo curl -L 'https://github.com/phracker/MacOSX-SDKs/releases/download/10.15/MacOSX10.12.sdk.tar.xz' | sudo tar -xzf -
              echo 'export SDKROOT=/Library/Developer/CommandLineTools/SDKs/MacOSX10.12.sdk' > ~/.profile
              echo 'export MACOSX_DEPLOYMENT_TARGET=10.12' >> ~/.profile
              echo 'export PYENV_PYTHON_VERSION=3.10.0' >> ~/.profile
        - run:
            name: checksums for caching
            command: |
              echo $(find ./patches -type f -exec md5 {} \; | md5 | cut -d' ' -f1)  >> CACHE_BREAK
              echo $({ find ./modulesets -type f -exec md5 {} \; & cat .circleci/config.yml; } | md5 | cut -d' ' -f1)  >> CACHE_ITER
              cat CACHE_BREAK
              cat CACHE_ITER
        - run:
            name: coreutils for realpath (for jpeg-xl)
            command: brew install coreutils

  build-env:
    steps:
        - restore_cache:
            keys:
              - jhbreak2-jhbuild-v2-10-v1
              - jhbreak2-jhbuild-v2-10-
        - run:
            name: Setup JHBuild
            command: |
              cd $HOME
              mkdir -p ~/.config && cp ~/project/jhbuildrc-gtk-osx-gimp-2.10 ~/.config/jhbuildrc-custom
              echo 'export PATH="$HOME/.cargo/bin:$HOME/.local/bin:$PATH:$HOME/.new_local/bin"' >> ~/.profile
              echo 'export ARCHFLAGS="-arch x86_64"' >> ~/.profile
              # PYTHON variable seems to be incorrectly set
              echo 'export PYTHON=/Library/Frameworks/Python.framework/Versions/3.9/bin/python3' >> ~/.profile
              # Unclear why this is needed, but if missing, jhbuild fails in some circumstances
              echo 'export PYENV_VERSION="3.9.7"' >> ~/.profile
              source ~/.profile
              PIPENV_YES=1 ~/project/gtk-osx-setup.sh
              $HOME/.new_local/bin/jhbuild bootstrap-gtk-osx-gimp
              cat ~/.profile
        - save_cache:
            paths:
              - ~/.new_local
              - ~/gtk
              - ~/.config
            key: jhbreak2-jhbuild-v2-10-v1

  get-cached-data:
    steps:
        - restore_cache:
            keys:
              - v{{ checksum "CACHE_BREAK" }}-gimp-2.10-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt2-2.10-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt1-2.10-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-bootstrap-2.10-{{ checksum "CACHE_ITER" }}
              - v{{ checksum "CACHE_BREAK" }}-gimp-2.10-
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt2-2.10-
              - v{{ checksum "CACHE_BREAK" }}-gimp-depspt1-2.10-
              - v{{ checksum "CACHE_BREAK" }}-bootstrap-2.10-

# -------------------------
#        JOBS
# -------------------------
jobs:

  build-env:
    macos:
        xcode: "13.1.0"

    steps:
        - setup
        - build-env

  bootstrap:
    macos:
        xcode: "13.1.0"

    steps:
        - setup
        - build-env
        - get-cached-data
        - run:
            name: Bootstrap
            command: |
              source ~/.profile && jhbuild build icu meta-gtk-osx-freetype meta-gtk-osx-bootstrap meta-gtk-osx-core
        - run:
            name: Cleanup
            command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*
        - save_cache:
            paths:
              - ~/gtk
            key: v{{ checksum "CACHE_BREAK" }}-bootstrap-2.10-{{ checksum "CACHE_ITER" }}

  dependencies-part1:
    macos:
        xcode: "13.1.0"

    steps:
        - setup
        - build-env
        - get-cached-data
        - run:
            name: Build GIMP dependencies part 1 (without gegl/babl)
            command: |
              source ~/.profile && jhbuild build suitesparse lcms libunistring gmp libnettle libtasn1 gnutls libjpeg readline python2 glib-networking openjpeg  gtk-mac-integration-gtk2 poppler poppler-data
              source ~/.profile && jhbuild build json-glib p2tc exiv2 gexiv2 ilmbase openexr libwebp libcroco librsvg-24 json-c
        - run:
            name: Cleanup
            command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*
        - save_cache:
            paths:
              - ~/gtk
            key: v{{ checksum "CACHE_BREAK" }}-gimp-depspt1-2.10-{{ checksum "CACHE_ITER" }}

  dependencies-part2:
    macos:
        xcode: "13.1.0"

    steps:
        - setup
        - build-env
        - get-cached-data
        - run:
            name: Build GIMP dependencies part 2 (without gegl/babl)
            command: |
              source ~/.profile && jhbuild build libmypaint mypaint-brushes libde265 nasm x265 libheif aalib shared-mime-info iso-codes libwmf libmng ghostscript
              source ~/.profile && jhbuild build pycairo pygobject pygtk gtk-mac-integration-gtk2-python
              source ~/.profile && jhbuild build libnsgif libmypaint mypaint-brushes libde265 nasm x265 yasm aom libheif aalib shared-mime-info iso-codes libwmf libmng ghostscript pycairo-1.18 pygobject pygtk gtk-mac-integration-gtk2-python
        - run:
            name: Cleanup
            command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*
        - save_cache:
            paths:
              - ~/gtk
            key: v{{ checksum "CACHE_BREAK" }}-gimp-depspt2-2.10-{{ checksum "CACHE_ITER" }}

  dependencies-babl-gegl:
    macos:
        xcode: "13.1.0"

    steps:
        - setup
        - build-env
        - get-cached-data
        - run:
            name: Build and test babl/gegl
            command: source ~/.profile && jhbuild build --check babl gegl

  build-gimp-2-10-and-package:
    macos:
        xcode: "13.1.0"

    steps:
        - setup
        - build-env
        - get-cached-data
        - run:
            name: Build GIMP
            # XXX `make check` is not working reliably under circle ci, so we are
            # not using --check flag
            command: |
              source ~/.profile
              jhbuild build gimp
        # - run:
        #     name: Building GIMP help (en) from git
        #     command: source ~/.profile && ALL_LINGUAS=en jhbuild build gimp-help-git
        - run:
            name: Cleanup
            command: find  ~/gtk/source -type d -mindepth 1 -maxdepth 1 | xargs -I% rm -rf %/*
        - save_cache:
            paths:
              - ~/gtk
            key: v{{ checksum "CACHE_BREAK" }}-gimp-2.10-{{ checksum "CACHE_ITER" }}
        - run:
            name: Setup gtk-mac-bundler
            command: |
              cd ~/Source
              git clone https://gitlab.gnome.org/lukaso/gtk-mac-bundler
              cd gtk-mac-bundler
              make install
        - run:
            name: Importing signing certificate
            command: |
              mkdir ${HOME}/codesign && cd ${HOME}/codesign
              echo "$osx_crt" | base64 -D > gnome.pfx
              curl 'https://developer.apple.com/certificationauthority/AppleWWDRCA.cer' > apple.cer
              security create-keychain -p "" signchain
              security set-keychain-settings signchain
              security unlock-keychain -u signchain
              security list-keychains  -s "${HOME}/Library/Keychains/signchain-db" "${HOME}/Library/Keychains/login.keychain-db"
              security import apple.cer -k signchain  -T /usr/bin/codesign
              security import gnome.pfx  -k signchain -P "$osx_crt_pw" -T /usr/bin/codesign
              security set-key-partition-list -S apple-tool:,apple: -k "" signchain
              rm -rf ${HOME}/codesign
        - run:
            name: Creating DMG package
            command: |
              source ~/.profile
              cd ${HOME}/project/package

              # Authorize applescript on circle ci build
              epochdate=$(($(date +'%s * 1000 + %-N / 1000000')))
              tcc_service_appleevents="replace into access (service,client,client_type,auth_value,auth_reason,auth_version,indirect_object_identifier_type,indirect_object_identifier,flags,last_modified) values (\"kTCCServiceAppleEvents\",\"/usr/sbin/sshd\",1,2,4,1,0,\"com.apple.finder\",0,$epochdate);"
              sudo sqlite3 "/Users/distiller/Library/Application Support/com.apple.TCC/TCC.db" "$tcc_service_appleevents"

              # run script
              jhbuild run ./build.sh debug
        - run:
            name:  Notarizing DMG package
            command: |
              source ~/.profile
              cd ${HOME}/project/package
              jhbuild run ./notarize.sh
        - store_artifacts:
            path: /tmp/artifacts
            destination: builds

workflows:
  version: 2
  build-different-versions:
    jobs:
      - build-env
      - bootstrap:
          requires:
            - build-env
      - dependencies-part1:
          requires:
            - bootstrap
      - dependencies-part2:
          requires:
            - dependencies-part1
      - dependencies-babl-gegl:
          requires:
            - dependencies-part2
      - build-gimp-2-10-and-package:
          requires:
            - dependencies-babl-gegl
