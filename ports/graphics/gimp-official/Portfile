# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           muniversal 1.0
PortGroup           compiler_blacklist_versions 1.0
PortGroup           meson 1.0
PortGroup           legacysupport 1.0
PortGroup           debug 1.0

name                gimp-official
set my_name         gimp-official

# ***** For releasing *****
# 1. Update version and/or revision to the desired state
#    If the version is not a release (e.g. 3.0.4) then do not touch the
#    revision as it will always pull the lastest code anyway.
#    Releases can include RC versions such as 3.0.0-RC1
# 2. During the RC cycle, the master branch version will be '+git', e.g.
#    3.0.0-RC1+git
# 3. Ensure any release-specific patches are added to the patchfiles list in the
#    correct if statement (and order)
# 4. Also update version info for babl and gegl
# 5. last_dev and last_release should be set individually when setting version.
#    For example, when setting to a release, update only last_release. When
#    setting to a dev version, update only last_dev.
# *****
version             3.1.5
set last_release    3.1.4
set last_dev        3.1.5
revision            0

# epoch must never be reduced. This was reduced for the 2.99.14 release
# which was incorrect.
epoch               1
license             {GPL-3+ LGPL-3+}
categories          graphics
maintainers         {lukaso @lukaso} openmaintainer

description         GIMP is a cross-platform image editor available for GNU/Linux, OS X, Windows \
                    and more operating systems.

long_description    GIMP is a cross-platform image editor available for GNU/Linux, OS X, Windows \
                    and more operating systems. It is free software, you can change its source \
                    code and distribute your changes. Whether you are a graphic designer, \
                    photographer, illustrator, or scientist, GIMP provides you with sophisticated \
                    tools to get your job done. You can further enhance your productivity with \
                    GIMP thanks to many customization options and 3rd party plugins.

homepage            https://gimp.org/
fetch.type          git
git.url             https://gitlab.gnome.org/GNOME/gimp.git

# Simplify version string for manipulation
set simple_version [string map {"-" "."} $version]

# Releasing and branch management
set major           [lindex [split ${simple_version} .] 0]
set minor           [lindex [split ${simple_version} .] 1]
set patch           [lindex [split ${simple_version} .] 2]
set rc_version      [lindex [split ${simple_version} .] 3]
set is_release      [expr {$patch % 2 == 0 && ($rc_version eq "" || [regexp {^RC\d+$} $rc_version])}]
set is_stable       [expr {$minor % 2 == 0} && ${is_release}]

puts "Major: ${major}"
puts "Minor: ${minor}"
puts "Patch: ${patch}"
puts "RC Version: ${rc_version}"
puts "Is Release: ${is_release}"
puts "Is Stable: ${is_stable}"

if {${is_release}} {
    if {[string length ${rc_version}] > 0} {
        set branch      GIMP_${major}_${minor}_${patch}_${rc_version}
    } else {
        set branch      GIMP_${major}_${minor}_${patch}
    }
} else {
    set branch      origin/master
    revision        0
}
git.branch      ${branch}
puts "Using branch: ${branch}"

patchfiles-append   pythonpath.patch
patch.pre_args      -p1

# Release-specific patches (step 2 from instructions above)
if {${major} == 2 && ${minor} == 99 && ${patch} == 16 && ${revision} >= 2} {
    # patchfiles-append \
    #                 macos-Remove-DYLD_LIBRARY_PATH.patch
}

depends_build-append \
                    port:pkgconfig

depends_lib-append \
                    path:lib/pkgconfig/babl.pc:babl \
                    path:include/turbojpeg.h:libjpeg-turbo \
                    port:exiv2 \
                    port:gexiv2 \
                    path:lib/pkgconfig/gobject-introspection-1.0.pc:gobject-introspection \
                    path:lib/pkgconfig/jasper.pc:jasper \
                    port:json-glib \
                    port:lcms2 \
                    port:libraw \
                    path:lib/pkgconfig/librsvg-2.0.pc:librsvg \
                    port:openexr \
                    port:poly2tri-c \
                    path:lib/pkgconfig/poppler.pc:poppler \
                    port:webp \
                    port:icu \
                    port:openjpeg \
                    port:json-c \
                    port:libde265 \
                    port:nasm \
                    port:x265 \
                    port:util-linux \
                    port:xmlto \
                    port:py-cairo \
                    port:py-gobject3 \
                    port:libarchive \
                    port:libyaml \
                    port:glib-networking \
                    port:poppler-data \
                    port:fontconfig \
                    port:libmypaint \
                    port:mypaint-brushes \
                    port:libheif \
                    port:aalib \
                    port:appstream \
                    port:shared-mime-info \
                    port:iso-codes \
                    port:libwmf \
                    port:libmng \
                    port:cfitsio \
                    port:libjxl \
                    port:ghostscript \
                    port:qoi \
                    port:gegl \
                    port:adwaita-icon-theme \
                    port:hicolor-icon-theme \
                    port:realpath

# Define the default Python version
set py_ver  3.10
set py_ver_nodot   [string map {. {}} ${py_ver}]

depends_build-append \
                    port:python${py_ver_nodot} \
                    port:py${py_ver_nodot}-gobject3 \
                    port:py${py_ver_nodot}-certifi

configure.python    ${prefix}/bin/python${py_ver}

post-fetch {
    system -W ${worksrcpath} "git submodule update --init"
}

post-patch {
    reinplace -W ${worksrcpath} \
        "s|@@PYTHON3_BIN@@|${configure.python}|" \
        meson.build
}

post-build {
    # We build these manually because meson would use palallelism (unsupported by tools/in-build-gimp.py from gimp repo)
    system -W ${workpath}/build "ninja gimp-data/images/logo/gimp.icns"
    file copy ${workpath}/build/gimp-data/images/logo/gimp.icns ${portpath}/../../../package/
    system -W ${workpath}/build "ninja gimp-data/images/logo/stamp-fileicon.icns"
    file delete -force ${portpath}/../../../package/fileicon-xcf.icns
    file copy ${workpath}/build/build/macos/fileicon-xcf.icns ${portpath}/../../../package/
    system -W ${workpath}/build "ninja gimp-data/images/logo/gimp-dmg.png"
    file copy ${workpath}/build/gimp-data/images/logo/gimp-dmg.png ${portpath}/../../../package/
}

# needs C++14 C11
compiler.cxx_standard 2014
compiler.c_standard   2011

set python_framework        ${frameworks_dir}/Python.framework/Versions/${py_ver}
configure.pkg_config_path   ${python_framework}/lib/pkgconfig

# disable vala extensions by default (currently broken)
# enable with +vala variant for testing
configure.args-append       -Dbuild-id=org.gimp.GIMP_official.${build_arch} \
                            -Drevision=${revision} \
                            -Dvala=disabled \
                            -Djavascript=disabled \
                            -Dgi-docgen=disabled \
                            -Dopenmp=disabled \
                            -Dpkgconfig.relocatable=true

# at present, luajit does not build on PowerPC
# platform darwin powerpc {
#     depends_lib-delete path:lib/libluajit-5.1.2.dylib:luajit
#     configure.args-append -Dlua=false
# }

# TODO
# Adding --build=whatever doesn't work with meson. How do we do this?
#platform darwin {
#    if {[variant_isset universal]} {
#        # In order to build universal on Leopard, you need MacPorts 2.1 at least
#        set merger_configure_args(x86_64) --build=${build_arch}-apple-${os.platform}${os.version}
#        set merger_configure_cflags(ppc) -fno-altivec
#        set merger_configure_cxxflags(ppc) -fno-altivec
#    } elseif {${build_arch} eq "ppc"} {
#        configure.cflags-append -fno-altivec
#        configure.cxxflags-append -fno-altivec
#    } elseif {${build_arch} eq "x86_64"} {
#        configure.args-append --build=${build_arch}-apple-${os.platform}${os.version}
#    }
#}

# gobject-introspection uses g-ir-scanner, which uses $CC from env
if {${universal_possible} && [variant_isset universal]} {
    foreach arch ${configure.universal_archs} {
        lappend merger_build_env(${arch})  "CC=${configure.cc} -arch ${arch}"
        lappend merger_destroot_env(${arch})  "CC=${configure.cc} -arch ${arch}"
    }
} else {
    build.env-append       "CC=${configure.cc} ${configure.cc_archflags}"
    destroot.env-append    "CC=${configure.cc} ${configure.cc_archflags}"
}

variant vala description {Enable build of vala extensions} {
    depends_lib-append path:bin/vala:vala
    configure.args-delete -Dvapigen=disabled
}

variant workshop description {Enable build of workshop operations} {
    depends_lib-append port:lensfun
    configure.args-append -Dworkshop=true
}

#
# the following dummy variants are used
# to identify this port's binary dependencies
# inherited from libsdl and librsvg
#

variant x11 conflicts quartz {}
variant quartz conflicts x11 {}

if {![variant_isset quartz]} {
    default_variants +x11
}

livecheck.type      regex
livecheck.url       https://download.gimp.org/pub/${my_name}/${branch}/
livecheck.regex     "${my_name}-(\\d+(?:\\.\\d+)*)"
